# map_controller.js.coffee

class BackboneLeaflet.Custom.MapController
  _.extend @prototype, Backbone.Events

  default_options:
    coords:
      latitude: 48.89364
      longitude: 2.33739
    zoom: 15

  constructor: (options)->
    @loadDefaults(options)
    @buildMap()

  loadDefaults: (options)->
    @options = _.defaults(options, @default_options)

  buildMap: ->
    @setMapLocation()
    L.tileLayer('http://{s}.tile.cloudmade.com/ceda08740383477f8dbb3bed2e9c2a47/997/256/{z}/{x}/{y}.png',
      attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://cloudmade.com">CloudMade</a>'
      maxZoom: 18).addTo(@base)

  setMapLocation: (latitude, longitude, zoom)->
    latitude = @options.coords.latitude unless latitude?
    longitude = @options.coords.longitude unless longitude?
    zoom = @options.zoom unless zoom?
    if @base?
      @base.setView([latitude, longitude], zoom)
    else
      @base = L.map('map').setView([latitude, longitude], zoom)

    current_location = @addMarker([latitude, longitude])
    current_location.bindPopup("You are here!")
    @setListeners()

  setListeners: ->
    console.log('setting listeners!!')
    @_places_array = []
    @options.collection.each (model)=>
      console.log('loading model')
      @listenTo(model, 'change', @togglePlace)
      @_places_array.push({place: model, is_on: false})

    @listenTo(@options.collection, 'changeLocation', @setMapLocation)

  baseIcon: ->
    return @_base_icon if @_base_icon?
    @_base_icon = L.icon(
      iconUrl: "<%= asset_path('marker-icon.png') %>"
      retinaUrl: "<%= asset_path('marker-icon-2x.png') %>"
      shadowUrl: "<%= asset_path('marker-shadow.png') %>"
      iconSize: [25, 41]
      iconAnchor: [12, 41]
      popupAnchor: [1, -34]
      shadowSize: [41, 41])

  addMarker: (lat_long, icon=null)->
    icon ?= @baseIcon()
    marker = L.marker(lat_long, {icon: icon})
    @base.addLayer(marker)
    marker

  togglePlace: (place)->
    console.log('toggling place')
    obj = _.find(@_places_array, (obj)-> return obj.place == place)
    if (obj.is_on)
      obj.is_on = false
      @base.removeLayer(obj.marker)
    else
      obj.marker = @addMarker([place.get('latitude'), place.get('longitude')])
      obj.marker.bindPopup("#{obj.place.get('name')}")
      obj.is_on = true
